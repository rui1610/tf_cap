name: Setup infrastructure (hana-db)

on:
  workflow_dispatch:

env:
  TARGET_BRANCH: main
  CF_METADATA_FILENAME: cloudfoundry.tfvars
  GITHUB_REPO_VARS: terraform.env

# Taken from https://github.com/hashicorp/setup-terraform
jobs:
  check-if-cf-file-exists:
    name: Check infrastructure status
    runs-on: ubuntu-latest
    outputs:
      cf_metadatafile_exists: ${{ steps.cf_metadata_exists.outputs.cf_metadatafile_exists }}
      generated_gh_reponame: ${{ steps.cf_metadata_exists.outputs.generated_gh_reponame }}
      cloudfoundry_org_name: ${{ steps.cf_metadata_exists.outputs.cloudfoundry_org_name }}
      cloudfoundry_space_name: ${{ steps.cf_metadata_exists.outputs.cloudfoundry_space_name }}
    steps:
    - name: Checkout Repo
      uses: actions/checkout@v3
      with:
        ref: ${{ env.TARGET_BRANCH }}
    - name: Check existance of CF file
      id: cf_metadata_exists
      working-directory: terraform
      shell: bash
      run: |
        cd ..
        source "$GITHUB_REPO_VARS"
        echo "generated_gh_reponame=$GENERATED_REPO_NAME"  >> $GITHUB_OUTPUT
        cd terraform_inmemory
        if [ -f "$CF_METADATA_FILENAME" ]; then
            echo "cf_metadatafile_exists=true" >> $GITHUB_OUTPUT && echo "The CF metadata file exists!"
            source "$CF_METADATA_FILENAME"
            echo "cloudfoundry_org_name  =$cloudfoundry_org_name"
            echo "cloudfoundry_space_name=$cloudfoundry_space_name" 
            echo "cloudfoundry_org_name=$cloudfoundry_org_name" >> $GITHUB_OUTPUT 
            echo "cloudfoundry_space_name=$cloudfoundry_space_name" >> $GITHUB_OUTPUT 
        else 
            echo "cf_metadatafile_exists=false" >> $GITHUB_OUTPUT && echo "The CF metadata file doesn't exist!"
        fi

    - name: "Get repo folder in container"
      shell: bash
      run: |
        echo "REPO_NAME=/__w/$(basename ${{ github.repository }})/$(basename ${{ github.repository }})" >> $GITHUB_ENV

  infrastructure1:
    if: ${{needs.check-if-cf-file-exists.outputs.cf_metadatafile_exists == 'false'}}
    name: Run Terraform script
    runs-on: ubuntu-latest
    needs: [check-if-cf-file-exists]
    outputs:
      cloudfoundry_org_name: ${{ steps.terraform_output.outputs.cloudfoundry_org_name }}
      cloudfoundry_space_name: ${{ steps.terraform_output.outputs.cloudfoundry_space_name }}
    steps:

    - name: Checkout Repo
      uses: actions/checkout@v3
      with:
        ref: ${{ env.TARGET_BRANCH }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_wrapper: false

    - name: Terraform Init
      id: init
      run: terraform init
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        TF_ACTION_WORKING_DIR: 'terraform'
      working-directory: terraform
      shell: bash

    - name: Terraform Apply
      id: terraform_apply
      run: terraform apply -auto-approve -var repo_name=${{ needs.check-if-cf-file-exists.outputs.generated_gh_reponame }}
      env:
        TARGET_BRANCH: ${{ env.TARGET_BRANCH }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        TF_ACTION_WORKING_DIR: 'terraform'
        BTP_USERNAME: ${{ secrets.BTP_USERNAME }}
        BTP_PASSWORD: ${{ secrets.BTP_PASSWORD }}
        CF_USER: ${{ secrets.BTP_USERNAME }}
        CF_PASSWORD: ${{ secrets.BTP_PASSWORD }}
      working-directory: terraform
      shell: bash

    - name: Terraform Output
      id: terraform_output
      run: |
        echo "cloudfoundry_org_name=$(terraform output cloudfoundry_org_name)" >> $GITHUB_OUTPUT
        echo "cloudfoundry_space_name=$(terraform output cloudfoundry_space_name)" >> $GITHUB_OUTPUT
        echo "cloudfoundry_org_name=$(terraform output cloudfoundry_org_name)" > $CF_METADATA_FILENAME
        echo "cloudfoundry_space_name=$(terraform output cloudfoundry_space_name)" >> $CF_METADATA_FILENAME
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        TF_ACTION_WORKING_DIR: 'terraform'
      working-directory: terraform
      shell: bash

    - name: Commit and push changes
      run: |
        git add -A
        git config user.email "tfbtpbot@users.noreply.github.com"
        git config user.name "[tf_btp bot] storage of cf info"
        git diff --quiet && git diff --staged --quiet || git commit -m "[tf_btp bot] Store retrieved cloudfoundry metadata."
        git push origin ${{ env.TARGET_BRANCH }}

  deploy-cap-application:
    name: Build + deploy CAP app
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/rui1610/tf_cap-tools:main
      options: --user root    
    needs: infrastructure1
    if: |
        always() &&
        (needs.infrastructure1.result == 'skipped' || needs.infrastructure1.result == 'success')    
    steps:
    - name: Checkout Repo
      uses: actions/checkout@v3
    - name: 'Start build process for CAP app'
      working-directory: ${{ env.REPO_NAME }}
      shell: bash
      run: |
        cd app
        cds add hana --for hybrid
        cds add mta
        mbt build -t gen --mtar mta.tar
        ls -l      
    - name: 'Start deploy process for CAP app'
      working-directory: ${{ env.REPO_NAME }}
      shell: bash
      env:
        CF_ORG_NAME: ${{needs.infrastructure1.outputs.cloudfoundry_org_name}}
        CF_SPACE_NAME: ${{needs.infrastructure1.outputs.cloudfoundry_space_name}}
      run: |
        cf api https://api.cf.us10.hana.ondemand.com
        cf auth ${{ secrets.BTP_USERNAME }} "${{ secrets.BTP_PASSWORD }}"
        cd terraform
        if [ -f "$CF_METADATA_FILENAME" ]; then
          source "$CF_METADATA_FILENAME"
          echo "cloudfoundry_org_name   = $cloudfoundry_org_name"
          echo "cloudfoundry_space_name = $cloudfoundry_space_name"
          cf target -o $cloudfoundry_org_name
          cf target -s $cloudfoundry_space_name
        else 
          echo "CF_ORG_NAME   = $CF_ORG_NAME"
          echo "CF_SPACE_NAME = $CF_SPACE_NAME"
          cf target -o $CF_ORG_NAME
          cf target -s $CF_SPACE_NAME
        fi
        cd ../app
        cds deploy --to hana --profile hybrid
        cf deploy gen/mta.tar
